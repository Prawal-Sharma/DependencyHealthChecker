const ora = require('ora');
const chalk = require('chalk');

async function check(dependencies, scanner, options) {
  const spinner = !options.quiet && !options.json ? 
    ora('Checking for vulnerabilities...').start() : null;
  
  try {
    let vulnerabilities = [];
    
    if (scanner.getVulnerabilities) {
      vulnerabilities = await scanner.getVulnerabilities(dependencies);
    }
    
    if (spinner) {
      const vulnCount = vulnerabilities.length;
      if (vulnCount === 0) {
        spinner.succeed('No vulnerabilities found');
      } else {
        spinner.warn(`Found ${vulnCount} vulnerabilities`);
      }
    }
    
    return vulnerabilities.map(vuln => ({
      ...vuln,
      severity: normalizeSeverity(vuln.severity)
    }));
    
  } catch (error) {
    if (spinner) {
      spinner.warn('Could not check vulnerabilities');
    }
    if (options.verbose) {
      console.error(chalk.yellow(`Warning: ${error.message}`));
    }
    return [];
  }
}

function normalizeSeverity(severity) {
  if (!severity) return 'moderate';
  
  const normalized = severity.toLowerCase();
  
  const severityMap = {
    'critical': 'critical',
    'high': 'high',
    'moderate': 'moderate',
    'medium': 'moderate',
    'low': 'low',
    'info': 'low'
  };
  
  return severityMap[normalized] || 'moderate';
}

module.exports = {
  check
};